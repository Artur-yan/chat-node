generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model AuthUser {
  id                 String         @id @unique
  email              String         @unique
  status             String?
  tracking_status    Boolean?       @default(false)
  verification_uuid  String?        @unique
  new_email          String?        @unique
  created            DateTime       @default(now())
  api_key            String?        @unique
  default_openai_key String?
  auth_key           AuthKey?
  auth_session       AuthSession[]
  bots               Bots[]
  google_auth        google_auth?
  subscription       Subscriptions?

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String   @unique
  primary_key     Boolean?
  expires         BigInt?
  auth_user       AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Bots {
  id                         String   @id @unique
  created                    DateTime @default(now())
  data_source_type           String?
  user_id                    String
  name                       String?
  settings                   Json?
  status                     String   @default("training")
  tocken_count               Int      @default(0)
  slack_bot_status           Boolean? @default(false)
  avatar_img                 String?
  chat_button_img            String?
  cloudinary_public_id       String?
  cloudinary_public_id_popup String?
  openai_api_key             String?
  use_chatnode_msgs          Boolean? @default(true)
  pinecone_info              Json     @default("{\"PINECONE_ENV\": \"eu-west1-gcp\", \"PINECONE_INDEX\": \"chatnode-3\"}")
  custom_domain              String?  @unique
  msg_count                  Int      @default(0)
  auth_user                  AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("bots")
}

model Subscriptions {
  user_id             String    @id @unique
  max_bot             Int?      @default(1) @db.SmallInt
  max_msg             Int?      @default(50)
  plan                Int?      @default(0) @db.SmallInt
  next_billing_cycle  DateTime? @db.Date
  stripe_customer_id  String?
  bot_count           Int       @default(0) @db.SmallInt
  msg_count           Int       @default(0)
  stripe_subscription String?   @unique
  status              String?
  max_tocken          Int       @default(100000)
  cancel_at           DateTime? @db.Date
  created_datetime    DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  addons              Json?
  free_no_branding    Boolean?
  auth_user           AuthUser  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("subscriptions")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model chat_history {
  session_id   String  @id(map: "conversation_pkey")
  namespace    String?
  chat_history Json[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BotsSource {
  s3_key      String    @id @unique
  name        String?
  source_type String?
  id          String?
  api_version Float     @default(1.1) @db.Real
  token_count Int?
  base_url    String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  status      String?   @default("")
  ids         String[]  @db.Uuid

  @@map("bots_source")
}

model AppSumoCodes {
  code          String    @id @unique
  redeemed      Boolean   @default(false)
  redeemed_date DateTime?
  redeemed_by   String?
  refunded      Boolean?  @default(false)

  @@map("appsumo_codes")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model slack_bots {
  id                    Int       @id @default(autoincrement())
  client_id             String    @db.VarChar(32)
  app_id                String    @db.VarChar(32)
  enterprise_id         String?   @db.VarChar(32)
  enterprise_name       String?   @db.VarChar(200)
  team_id               String?   @db.VarChar(32)
  team_name             String?   @db.VarChar(200)
  bot_token             String?   @db.VarChar(200)
  bot_id                String?   @db.VarChar(32)
  bot_user_id           String?   @db.VarChar(32)
  bot_scopes            String?   @db.VarChar(1000)
  bot_refresh_token     String?   @db.VarChar(200)
  bot_token_expires_at  DateTime? @db.Timestamp(6)
  is_enterprise_install Boolean
  installed_at          DateTime  @db.Timestamp(6)
  bot_internal_id       String?

  @@index([client_id, enterprise_id, team_id, installed_at], map: "slack_bots_idx")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model slack_installations {
  id                                 Int       @id @default(autoincrement())
  client_id                          String    @db.VarChar(32)
  app_id                             String    @db.VarChar(32)
  enterprise_id                      String?   @db.VarChar(32)
  enterprise_name                    String?   @db.VarChar(200)
  enterprise_url                     String?   @db.VarChar(200)
  team_id                            String?   @db.VarChar(32)
  team_name                          String?   @db.VarChar(200)
  bot_token                          String?   @db.VarChar(200)
  bot_id                             String?   @db.VarChar(32)
  bot_user_id                        String?   @db.VarChar(32)
  bot_scopes                         String?   @db.VarChar(1000)
  bot_refresh_token                  String?   @db.VarChar(200)
  bot_token_expires_at               DateTime? @db.Timestamp(6)
  user_id                            String    @db.VarChar(32)
  user_token                         String?   @db.VarChar(200)
  user_scopes                        String?   @db.VarChar(1000)
  user_refresh_token                 String?   @db.VarChar(200)
  user_token_expires_at              DateTime? @db.Timestamp(6)
  incoming_webhook_url               String?   @db.VarChar(200)
  incoming_webhook_channel           String?   @db.VarChar(200)
  incoming_webhook_channel_id        String?   @db.VarChar(200)
  incoming_webhook_configuration_url String?   @db.VarChar(200)
  is_enterprise_install              Boolean
  token_type                         String?   @db.VarChar(32)
  installed_at                       DateTime  @db.Timestamp(6)
  bot_internal_id                    String?

  @@index([client_id, enterprise_id, team_id, user_id, installed_at], map: "slack_installations_idx")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model slack_oauth_states {
  id        Int      @id @default(autoincrement())
  state     String   @db.VarChar(200)
  expire_at DateTime @db.Timestamp(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model training_urls {
  session_id        String
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  user_id           String
  original_url      String?
  scraped_url       Json?
  count             Int?
  scrape_session_id String   @unique @db.Uuid
  status            String?

  @@id([session_id, user_id, scrape_session_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ChatHistory {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  message    Json?
  session_id String?
  user_id    String?
  bot_id     String?
  vote       Int?      @default(0)

  @@map("new_chat_history")
}

model chatConversations {
  session_id    String    @id
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  user_id       String?
  bot_id        String?
  enduser_email String?
  enduser_name  String?
  enduser_phone String?
  read          Boolean?  @default(false)
  likes         Int?      @default(0)
  dislikes      Int?      @default(0)

  @@map("chat_conversations")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model whatsapp {
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  business_id     String
  system_token    String?
  phone_number_id Int
  callback_url    String?

  @@id([business_id, phone_number_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model google_auth {
  user_id       String   @id
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  email         String?
  access_token  String?
  refresh_token String?
  bot_id        String?
  auth_user     AuthUser @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model webhook {
  bot_id      String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  type        String
  webhook_url String

  @@id([bot_id, type, webhook_url])
}
