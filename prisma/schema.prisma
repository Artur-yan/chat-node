generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthUser {
  id           String         @id @unique
  email        String         @unique
  auth_key     AuthKey[]
  auth_session AuthSession[]
  bots         Bots[]
  subscription Subscriptions?

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Bots {
  id               String   @id @unique
  created          DateTime @default(now())
  data_source_type String
  user_id          String
  name             String?
  settings         Json?
  auth_user        AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("bots")
}

model Subscriptions {
  user_id            String    @id
  msg_count      Int      @default(0)
  bot_count      Int      @default(0) @db.SmallInt
  max_bot            Int?      @default(1) @db.SmallInt
  max_msg            Int?      @default(30)
  plan               Int?      @default(0) @db.SmallInt
  last_reset_date    DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  stripe_customer_id String?
  AuthUser           AuthUser  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}
