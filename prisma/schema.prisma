generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthUser {
  id                       String         @id @unique
  email                    String         @unique
  auth_key                 AuthKey[]
  auth_session             AuthSession[]
  bots                     Bots[]
  subscription             Subscriptions?
  status                   String?
  email_verification_token String?        @default(uuid())

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Bots {
  id               String   @id @unique
  created          DateTime @default(now())
  data_source_type String
  user_id          String
  name             String?
  settings         Json?
  auth_user        AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("bots")
}

model Subscriptions {
  user_id             String    @id
  max_bot             Int?      @default(1) @db.SmallInt
  max_msg             Int?      @default(30)
  plan                Int?      @default(0) @db.SmallInt
  last_reset_date     DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  stripe_customer_id  String?
  bot_count           Int       @default(0) @db.SmallInt
  msg_count           Int       @default(0)
  stripe_subscription String?   @unique
  status              String?
  auth_user           AuthUser  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model chat_history {
  session_id   String  @id(map: "conversation_pkey")
  namespace    String?
  chat_history Json[]
}
